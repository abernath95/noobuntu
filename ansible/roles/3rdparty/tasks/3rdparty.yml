- name: "Import {{ item.name }} GPG key"
  apt_key:
    url: "{{ item.gpg_url }}"
    state: present
  when: item.gpg_url is defined

- name: "Import {{ item.name }} GPG key"
  apt_key:
    keyserver: "{{ item.gpg_server }}"
    id: "{{ item.gpg_id }}"
    state: present
  when: item.gpg_server is defined and item.gpg_id is defined

- name: "Import {{ item.name }} GPG key"
  apt_key:
    data: "{{ lookup('file', '{{ item.gpg_file }}.asc') }}"
    state: present
  when: item.gpg_file is defined

- name: "Add {{ item.name }} repo"
  template:
    src: "{{ item.repo_file }}.list.j2"
    dest: "/etc/apt/sources.list.d/{{ item.repo_file }}.list"

# use inline jinja conditional instead of when: so that
# thirdparty_conflict is always defined for the next step
- name: Check if conflicting packages are installed
  shell: "{% if item.except is defined%}apt list --installed | grep \"{{ item.except }}/\"{% else %}false{% endif %}"
  ignore_errors: yes
  changed_when: no
  no_log: True
  register: thirdparty_conflict

- name: "Install {{ item.name }}"
  apt:
    name: "{{ item.package }}"
    # TODO use this conditionally, when package name doesn't have the version specified
    # or add arg for specifying version?
    # state: latest
    update_cache: yes
    install_recommends: "{{ item.install_recommends | default('yes') }}"
  register: app_install
  when: (item.package is defined) and (thirdparty_conflict.rc != 0)

# installing the package adds noise to the repo file in postinst, fix it
- name: "Fix {{ item.name }} repo file"
  template:
    src: "{{ item.repo_file }}.list.j2"
    dest: "/etc/apt/sources.list.d/{{ item.repo_file }}.list"
  when: app_install.changed and item.repo_overwrite is defined and item.repo_overwrite == True

- name: Run ldconfig
  command: ldconfig
  when: app_install.changed and item.ldconfig is defined and item.ldconfig == True
