# use inline jinja conditional instead of when: so that
# thirdparty_conflict is always defined for the next step
- name: Check if conflicting packages are installed
  shell: "{% if item.except is defined%}apt list --installed | grep \"{{ item.except }}/\"{% else %}false{% endif %}"
  failed_when: no
  changed_when: no
  register: thirdparty_conflict

# if version is undefined, unhold to ensure the latest is installed
# rc = 100 when 'Unable to locate package' = not installed yet
- name: "Unhold {{ item.package }}"
  command: "apt-mark unhold {{ item.package }}"
  register: thirdparty_unhold
  changed_when: ('was already not hold.' not in thirdparty_unhold.stdout) and (thirdparty_unhold.rc != 100)
  failed_when: (thirdparty_unhold.rc != 0) and (thirdparty_unhold.rc != 100)
  when: item.version is not defined

# allow upgrades from one specified version to another, but not downgrades
- name: "Unhold {{ item.package }}"
  shell: "apt install --simulate {{ item.package }}={{ item.version }} | grep 'The following packages will be upgraded' && apt-mark unhold {{ item.package }}"
  failed_when: no
  changed_when: thirdparty_unhold2.rc == 0
  register: thirdparty_unhold2
  when: item.version is defined

- name: "Install {{ item.name }}"
  apt:
    name: "{{ item.package }}{% if item.version is defined and item.version | length > 0 %}={{ item.version }}{% endif %}"
    state: "{% if item.version is defined and item.version | length > 0 %}present{% else %}latest{% endif %}"
    update_cache: yes
    install_recommends: "{{ item.install_recommends | default('yes') }}"
  register: thirdparty_install
  when: thirdparty_conflict.rc != 0

- name: "Hold {{ item.package }}"
  command: "apt-mark hold {{ item.package }}"
  register: thirdparty_hold
  changed_when: ('was already set on hold.' not in thirdparty_hold.stdout)
  when: item.version is defined

# enforce upgrade if the repo provides a newer version of an Ubuntu package
# e.g. PostgreSQL's libpq/libgeos packages
- name: Update all packages
  apt:
    upgrade: dist
    update_cache: no

# remove the superseded Ubuntu packages
- name: Remove obsolete packages
  apt:
    autoremove: yes

# installing the package adds noise to the repo file in postinst, fix it
- name: "Fix {{ item.name }} repo file"
  template:
    src: "{{ item.repo_file }}.list.j2"
    dest: "/etc/apt/sources.list.d/{{ item.repo_file }}.list"
    mode: '0644'
  when: (thirdparty_install.changed) and (item.repo_overwrite is defined) and (item.repo_overwrite == True)
